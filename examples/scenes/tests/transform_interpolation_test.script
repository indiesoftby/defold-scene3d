go.property("text_obj", msg.url("/text_3D"))
go.property("text_obj_interpolated", msg.url("/text_3D_interpolated"))

go.property("tube_obj", msg.url("/tube"))
go.property("tube_obj_interpolated", msg.url("/tube_interpolated"))

local transform_interpolation = require("scene3d.scripts.transform_interpolation")

local function late_update(self)
    
end

function init(self)
    self.late_update_id = scene3d.prerender_register(late_update)

    self.anim1 = 0
    self.anim1_transform = transform_interpolation.init({ obj_id = self.text_obj })
    self.anim1_offset = go.get_position(self.text_obj_interpolated)

    self.anim2 = 90
    self.anim2_transform = transform_interpolation.init({ obj_id = self.tube_obj })
    self.anim2_radius = vmath.length(go.get_position(self.tube_obj))
    self.anim2_offset = vmath.vector3(go.get_position(self.tube_obj_interpolated).x, 0, 0)
end

function final(self)
    scene3d.prerender_unregister(self.late_update_id)
end

function update(self, dt)
    transform_interpolation.interpolate(self.anim1_transform)
    transform_interpolation.interpolate(self.anim2_transform)

    go.set(self.text_obj_interpolated, "rotation", self.anim1_transform.rotation)
    go.set(self.text_obj_interpolated, "position", self.anim1_offset + self.anim1_transform.position)

    go.set(self.tube_obj_interpolated, "rotation", self.anim2_transform.rotation)
    go.set(self.tube_obj_interpolated, "position", self.anim2_offset + self.anim2_transform.position)
end

function fixed_update(self, dt)
    self.anim1 = self.anim1 + 90 * dt
    go.set(self.text_obj, "euler.y", self.anim1)

    self.anim2 = self.anim2 + 45 * dt
    go.set(self.tube_obj, "position", self.anim2_radius * vmath.vector3(math.cos(math.rad(self.anim2)), math.sin(math.rad(self.anim2)), 0))
    go.set(self.tube_obj, "euler.x", self.anim2 * 5)

    transform_interpolation.start_frame(self.anim1_transform, dt)
    transform_interpolation.start_frame(self.anim2_transform, dt)
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
end
